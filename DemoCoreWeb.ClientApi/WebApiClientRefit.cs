//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemoWebApi.DemoDataRefit.Client
{
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class Address : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.ComponentModel.DefaultValueAttribute("Australia")]
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; } = "Australia";
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Street1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Street2 { get; set; }
		
		[System.ComponentModel.DefaultValueAttribute(AddressType.Residential)]
		[System.Runtime.Serialization.DataMember()]
		public DemoWebApi.DemoDataRefit.Client.AddressType Type { get; set; } = AddressType.Residential;
		
		/// <summary>
		/// It is a field
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DemoWebApi.DemoData.AnotherRefit.Client.MyPoint Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public enum AddressType
	{
		
		[System.Runtime.Serialization.EnumMember()]
		Postal,
		
		[System.Runtime.Serialization.EnumMember()]
		Residential,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class Company : DemoWebApi.DemoDataRefit.Client.Entity
	{
		
		/// <summary>
		/// BusinessNumber to be serialized as BusinessNum
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="BusinessNum")]
		public string BusinessNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessNumberType { get; set; }
		
		/// <summary>
		/// Data type: Date
		/// </summary>
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Date)]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset FoundDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateOnly RegisterDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[][] TextMatrix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public int[,] Int2D { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public int[][] Int2DJagged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.IEnumerable<string> Lines { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public enum Days
	{
		
		[System.Runtime.Serialization.EnumMember()]
		Sat = 1,
		
		[System.Runtime.Serialization.EnumMember()]
		Sun = 2,
		
		[System.Runtime.Serialization.EnumMember()]
		Mon = 3,
		
		[System.Runtime.Serialization.EnumMember()]
		Tue = 4,
		
		[System.Runtime.Serialization.EnumMember()]
		Wed = 5,
		
		/// <summary>
		/// Thursday
		/// </summary>
		[System.Runtime.Serialization.EnumMember()]
		Thu = 6,
		
		[System.Runtime.Serialization.EnumMember()]
		Fri = 7,
	}
	
	/// <summary>
	/// Base class of company and person
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class Entity : object
	{
		
		/// <summary>
		/// Multiple addresses
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.IList<DemoWebApi.DemoDataRefit.Client.Address> Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Guid> Id { get; set; }
		
		/// <summary>
		/// Name of the entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.ObjectModel.ObservableCollection<DemoWebApi.DemoDataRefit.Client.PhoneNumber> PhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Uri Web { get; set; }
	}
	
	/// <summary>
	/// To test different serializations against Guid
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class IdMap : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Guid Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(EmitDefaultValue=false)]
		public System.Guid IdNotEmitDefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Guid> NullableId { get; set; }
		
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.Runtime.Serialization.DataMember(IsRequired =true)]
		public string RequiredName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	[Newtonsoft.Json.JsonConverterAttribute(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public enum MedicalContraindiationResponseTypeReason
	{
		
		[System.Runtime.Serialization.EnumMember(Value="Mm")]
		M,
		
		[System.Runtime.Serialization.EnumMember(Value="Ss")]
		S,
		
		[System.Runtime.Serialization.EnumMember(Value="Pp")]
		P,
		
		[System.Runtime.Serialization.EnumMember(Value="I")]
		I,
		
		[System.Runtime.Serialization.EnumMember(Value="A")]
		A,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public enum MedicalContraindiationResponseTypeTypeCode
	{
		
		[System.Runtime.Serialization.EnumMember(Value="P")]
		P,
		
		[System.Runtime.Serialization.EnumMember(Value="Tt")]
		T,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class MimsPackage : object
	{
		
		/// <summary>
		/// Range: inclusive between 10 and 100
		/// </summary>
		[System.ComponentModel.DefaultValueAttribute(20)]
		[System.ComponentModel.DataAnnotations.Range(typeof(System.Int32), "10", "100", ErrorMessage="KK has to be between 10 and 100.")]
		[System.Runtime.Serialization.DataMember()]
		public int KK { get; set; } = 20;
		
		/// <summary>
		/// Having an initialized value in the property is not like defining a DefaultValueAttribute. Such intialization happens at run time,
		/// and there's no reliable way for a codegen to know if the value is declared by the programmer, or is actually the natural default value like 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public int KK2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<DemoWebApi.DemoDataRefit.Client.MyEnumType> OptionalEnum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<int> OptionalInt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DemoWebApi.DemoDataRefit.Client.MimsResult<decimal> Result { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class MimsResult<T> : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTime GeneratedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public T Result { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public enum MyEnumType
	{
		
		[System.Runtime.Serialization.EnumMember()]
		First = 1,
		
		[System.Runtime.Serialization.EnumMember()]
		Two = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class MyGeneric<T, K, U> : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public K MyK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public T MyT { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public U MyU { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class MyPeopleDic : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.IDictionary<string, string> AnotherDic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.IDictionary<string, DemoWebApi.DemoDataRefit.Client.Person> Dic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.IDictionary<int, string> IntDic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class Person : DemoWebApi.DemoDataRefit.Client.Entity
	{
		
		/// <summary>
		/// Data type: Date
		/// </summary>
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Date)]
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Baptised { get; set; }
		
		/// <summary>
		/// Date of Birth.
		/// This is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> DOB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GivenName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Surname { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class PhoneNumber : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FullNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DemoWebApi.DemoDataRefit.Client.PhoneType PhoneType { get; set; }
	}
	
	/// <summary>
	/// Phone type
	/// Tel, Mobile, Skyp and Fax
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public enum PhoneType
	{
		
		/// <summary>
		/// Land line
		/// </summary>
		[System.Runtime.Serialization.EnumMember()]
		Tel,
		
		/// <summary>
		/// Mobile phone
		/// </summary>
		[System.Runtime.Serialization.EnumMember()]
		Mobile,
		
		[System.Runtime.Serialization.EnumMember()]
		Skype,
		
		[System.Runtime.Serialization.EnumMember()]
		Fax,
	}
}
namespace DemoWebApi.DemoData.AnotherRefit.Client
{
	
	
	/// <summary>
	/// 2D position
	/// with X and Y
	/// for Demo
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public struct MyPoint
	{
		
		/// <summary>
		/// X
		/// </summary>
		public double X;
		
		/// <summary>
		/// Y
		/// </summary>
		public double Y;
	}
}
namespace DemoWebApi.ModelsRefit.Client
{
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class AddExternalLoginBindingModel : object
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string ExternalAccessToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class ChangePasswordBindingModel : object
	{
		
		/// <summary>
		/// Data type: Password
		/// </summary>
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
		public string ConfirmPassword { get; set; }
		
		/// <summary>
		/// Required
		/// String length: inclusive between 6 and 100
		/// Data type: Password
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=6, ErrorMessage="The {0} must be at least {2} characters long.")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
		public string NewPassword { get; set; }
		
		/// <summary>
		/// Required
		/// Data type: Password
		/// </summary>
		[System.ComponentModel.DataAnnotations.RequiredAttribute()]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
		public string OldPassword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class RegisterBindingModel : object
	{
		
		/// <summary>
		/// Data type: Password
		/// </summary>
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
		public string ConfirmPassword { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// String length: inclusive between 6 and 100
		/// Data type: Password
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=6, ErrorMessage="The {0} must be at least {2} characters long.")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class RegisterExternalBindingModel : object
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string Email { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class RemoveLoginBindingModel : object
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string LoginProvider { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public string ProviderKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class SetPasswordBindingModel : object
	{
		
		/// <summary>
		/// Data type: Password
		/// </summary>
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
		public string ConfirmPassword { get; set; }
		
		/// <summary>
		/// Required
		/// String length: inclusive between 6 and 100
		/// Data type: Password
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=6, ErrorMessage="The {0} must be at least {2} characters long.")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
		public string NewPassword { get; set; }
	}
	
	/// <summary>
	/// Auth token
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class TokenResponseModel : object
	{
		
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public string Expires { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires_in")]
		public int ExpiresIn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issued")]
		public string Issued { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token_type")]
		public string TokenType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
}
namespace DemoWebApi.ControllersRefit.Client
{
	
	
	/// <summary>
	/// This class is used to carry the result of various file uploads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class FileResult : object
	{
		
		/// <summary>
		/// Gets or sets the local path of the file saved on the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.IEnumerable<string> FileNames { get; set; }
		
		/// <summary>
		/// Gets or sets the submitter as indicated in the HTML form used to upload the data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Submitter { get; set; }
	}
	
	/// <summary>
	/// Complex hero type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class Hero : object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Death { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateOnly DOB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public long Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlowdemo.com/2020/09")]
	[System.SerializableAttribute()]
	public class SuperHero : DemoWebApi.ControllersRefit.Client.Hero
	{
		
		[System.Runtime.Serialization.DataMember()]
		public bool Super { get; set; }
	}
}
namespace DemoCoreWeb.ControllersRefit.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Refit;
	
	
	public interface ISpecialTypes
	{
		
		/// <summary>
		/// Anonymous Dynamic of C#
		/// GET api/SpecialTypes/AnonymousDynamic
		/// </summary>
		/// <returns>dyanmic things</returns>
		[Get("api/SpecialTypes/AnonymousDynamic")]
		Task<Newtonsoft.Json.Linq.JObject> GetAnonymousDynamicAsync();
		
		/// <summary>
		/// Async function returing dynamic
		/// GET api/SpecialTypes/AnonymousDynamic2
		/// </summary>
		[Get("api/SpecialTypes/AnonymousDynamic2")]
		Task<Newtonsoft.Json.Linq.JObject> GetAnonymousDynamic2Async();
		
		/// <summary>
		/// GET api/SpecialTypes/AnonymousObject
		/// </summary>
		[Get("api/SpecialTypes/AnonymousObject")]
		Task<Newtonsoft.Json.Linq.JObject> GetAnonymousObjectAsync();
		
		/// <summary>
		/// Async function returning object
		/// GET api/SpecialTypes/AnonymousObject2
		/// </summary>
		[Get("api/SpecialTypes/AnonymousObject2")]
		Task<Newtonsoft.Json.Linq.JObject> GetAnonymousObject2Async();
		
		/// <summary>
		/// POST api/SpecialTypes/AnonymousObject
		/// </summary>
		[Post("api/SpecialTypes/AnonymousObject")]
		Task<Newtonsoft.Json.Linq.JObject> PostAnonymousObjectAsync([Body()] Newtonsoft.Json.Linq.JObject obj);
		
		/// <summary>
		/// Async returning object, Post dynamic
		/// POST api/SpecialTypes/AnonymousObject2
		/// </summary>
		[Post("api/SpecialTypes/AnonymousObject2")]
		Task<Newtonsoft.Json.Linq.JObject> PostAnonymousObject2Async([Body()] Newtonsoft.Json.Linq.JObject obj);
	}
}
namespace DemoWebApi.ControllersRefit.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Refit;
	
	
	public interface IDateTypes
	{
		
		/// <summary>
		/// GET api/DateTypes/GetDateOnlyMin
		/// </summary>
		[Get("api/DateTypes/GetDateOnlyMin")]
		Task<System.DateOnly> GetDateOnlyMinAsync();
		
		/// <summary>
		/// GET api/DateTypes/NullableDatetime/{hasValue}
		/// </summary>
		[Get("api/DateTypes/NullableDatetime/{hasValue}")]
		Task<System.Nullable<System.DateTime>> GetDateTimeAsync(bool hasValue);
		
		/// <summary>
		/// return DateTimeOffset.Now
		/// GET api/DateTypes/ForDateTimeOffset
		/// </summary>
		[Get("api/DateTypes/ForDateTimeOffset")]
		Task<System.DateTimeOffset> GetDateTimeOffsetAsync();
		
		/// <summary>
		/// GET api/DateTypes/NextHour/{dt}
		/// </summary>
		[Get("api/DateTypes/NextHour/{dt}")]
		Task<System.DateTimeOffset> GetNextHourAsync(System.DateTimeOffset dt);
		
		/// <summary>
		/// If Dt is not defined, add a hour from now
		/// GET api/DateTypes/NextHourNullable?n={n}&dt={dt}
		/// </summary>
		[Get("api/DateTypes/NextHourNullable?n={n}&dt={dt}")]
		Task<System.DateTimeOffset> GetNextHourNullableAsync(int n, System.Nullable<System.DateTimeOffset> dt);
		
		/// <summary>
		/// GET api/DateTypes/NextYear/{dt}
		/// </summary>
		[Get("api/DateTypes/NextYear/{dt}")]
		Task<System.DateTime> GetNextYearAsync(System.DateTime dt);
		
		/// <summary>
		/// If Dt is not defined, add a year from now
		/// GET api/DateTypes/NextYearNullable?n={n}&dt={dt}
		/// </summary>
		[Get("api/DateTypes/NextYearNullable?n={n}&dt={dt}")]
		Task<System.DateTime> GetNextYearNullableAsync(int n, System.Nullable<System.DateTime> dt);
		
		/// <summary>
		/// Client should send DateTime.Date
		/// POST api/DateTypes/IsDateTimeDate
		/// </summary>
		[Post("api/DateTypes/IsDateTimeDate")]
		Task<System.Tuple<System.DateOnly, System.DateTime>> IsDateTimeDateAsync([Body()] System.DateTime dt);
		
		/// <summary>
		/// POST api/DateTypes/IsDateTimeOffsetDate
		/// </summary>
		[Post("api/DateTypes/IsDateTimeOffsetDate")]
		Task<System.Tuple<System.DateOnly, System.DateTimeOffset>> IsDateTimeOffsetDateAsync([Body()] System.DateTimeOffset dt);
		
		/// <summary>
		/// POST api/DateTypes/ForDateOnly
		/// </summary>
		[Post("api/DateTypes/ForDateOnly")]
		Task<System.DateOnly> PostDateOnlyAsync([Body()] System.DateOnly d);
		
		/// <summary>
		/// POST api/DateTypes/DateOnlyNullable
		/// </summary>
		[Post("api/DateTypes/DateOnlyNullable")]
		Task<System.Nullable<System.DateOnly>> PostDateOnlyNullableAsync([Body()] System.Nullable<System.DateOnly> d);
		
		/// <summary>
		/// POST api/DateTypes/ForDateTime
		/// </summary>
		[Post("api/DateTypes/ForDateTime")]
		Task<System.DateTime> PostDateTimeAsync([Body()] System.DateTime d);
		
		/// <summary>
		/// return d;
		/// POST api/DateTypes/ForDateTimeOffset
		/// </summary>
		[Post("api/DateTypes/ForDateTimeOffset")]
		Task<System.DateTimeOffset> PostDateTimeOffsetAsync([Body()] System.DateTimeOffset d);
		
		/// <summary>
		/// return d.ToString("O")
		/// POST api/DateTypes/ForDateTimeOffsetForO
		/// </summary>
		[Post("api/DateTypes/ForDateTimeOffsetForO")]
		Task<string> PostDateTimeOffsetForOAsync([Body()] System.DateTimeOffset d);
		
		/// <summary>
		/// POST api/DateTypes/ForDateTimeOffsetForOffset
		/// </summary>
		[Post("api/DateTypes/ForDateTimeOffsetForOffset")]
		Task<System.TimeSpan> PostDateTimeOffsetForOffsetAsync([Body()] System.DateTimeOffset d);
		
		/// <summary>
		/// Returned is DateTimeOffset?
		/// POST api/DateTypes/DateTimeOffsetNullable
		/// </summary>
		[Post("api/DateTypes/DateTimeOffsetNullable")]
		Task<System.Nullable<System.DateTimeOffset>> PostDateTimeOffsetNullableAsync([Body()] System.Nullable<System.DateTimeOffset> d);
		
		/// <summary>
		/// POST api/DateTypes/ForDateTimeOffsetStringForOffset
		/// </summary>
		[Post("api/DateTypes/ForDateTimeOffsetStringForOffset")]
		Task<System.TimeSpan> PostDateTimeOffsetStringForOffsetAsync([Body()] string s);
		
		/// <summary>
		/// POST api/DateTypes/NextYear
		/// </summary>
		[Post("api/DateTypes/NextYear")]
		Task<System.DateTime> PostNextYearAsync([Body()] System.DateTime dt);
		
		/// <summary>
		/// GET api/DateTypes/DateOnlyStringQuery?d={d}
		/// </summary>
		[Get("api/DateTypes/DateOnlyStringQuery?d={d}")]
		Task<System.DateOnly> QueryDateOnlyAsStringAsync(string d);
		
		/// <summary>
		/// GET api/DateTypes/RouteDateTimeOffset/{d}
		/// </summary>
		[Get("api/DateTypes/RouteDateTimeOffset/{d}")]
		Task<System.DateTimeOffset> RouteDateTimeOffsetAsync(System.DateTimeOffset d);
		
		/// <summary>
		/// Return Tuple DateTime?, DateTime?
		/// GET api/DateTypes/SearchDateRange?startDate={startDate}&endDate={endDate}
		/// </summary>
		/// <param name="startDate">DateTime? startDate = null</param>
		/// <param name="endDate">DateTime? endDate = null</param>
		[Get("api/DateTypes/SearchDateRange?startDate={startDate}&endDate={endDate}")]
		Task<System.Tuple<System.Nullable<System.DateTime>, System.Nullable<System.DateTime>>> SearchDateRangeAsync(System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate);
	}
	
	public interface IEntities
	{
		
		/// <summary>
		/// POST api/Entities/createCompany
		/// </summary>
		[Post("api/Entities/createCompany")]
		Task<DemoWebApi.DemoDataRefit.Client.Company> CreateCompanyAsync([Body()] DemoWebApi.DemoDataRefit.Client.Company p);
		
		/// <summary>
		/// POST api/Entities/createPerson
		/// </summary>
		[Post("api/Entities/createPerson")]
		Task<long> CreatePersonAsync([Body()] DemoWebApi.DemoDataRefit.Client.Person p);
		
		/// <summary>
		/// POST api/Entities/createPerson2
		/// </summary>
		[Post("api/Entities/createPerson2")]
		Task<DemoWebApi.DemoDataRefit.Client.Person> CreatePerson2Async([Body()] DemoWebApi.DemoDataRefit.Client.Person p);
		
		/// <summary>
		/// POST api/Entities/createPerson3
		/// </summary>
		[Post("api/Entities/createPerson3")]
		Task<DemoWebApi.DemoDataRefit.Client.Person> CreatePerson3Async([Body()] DemoWebApi.DemoDataRefit.Client.Person p, string middle);
		
		/// <summary>
		/// DELETE api/Entities/{id}
		/// </summary>
		[Delete("api/Entities/{id}")]
		Task DeleteAsync(long id);
		
		/// <summary>
		/// GET api/Entities/Company/{id}
		/// </summary>
		[Get("api/Entities/Company/{id}")]
		Task<DemoWebApi.DemoDataRefit.Client.Company> GetCompanyAsync(long id);
		
		/// <summary>
		/// POST api/Entities/Mims
		/// </summary>
		[Post("api/Entities/Mims")]
		Task<DemoWebApi.DemoDataRefit.Client.MimsResult<string>> GetMimsAsync([Body()] DemoWebApi.DemoDataRefit.Client.MimsPackage p);
		
		/// <summary>
		/// Post MyGeneric string, decimal, double
		/// POST api/Entities/MyGeneric
		/// </summary>
		[Post("api/Entities/MyGeneric")]
		Task<DemoWebApi.DemoDataRefit.Client.MyGeneric<string, decimal, double>> GetMyGenericAsync([Body()] DemoWebApi.DemoDataRefit.Client.MyGeneric<string, decimal, double> s);
		
		/// <summary>
		/// Post MyGeneric string, decimal, Person
		/// POST api/Entities/MyGenericPerson
		/// </summary>
		[Post("api/Entities/MyGenericPerson")]
		Task<DemoWebApi.DemoDataRefit.Client.MyGeneric<string, decimal, DemoWebApi.DemoDataRefit.Client.Person>> GetMyGenericPersonAsync([Body()] DemoWebApi.DemoDataRefit.Client.MyGeneric<string, decimal, DemoWebApi.DemoDataRefit.Client.Person> s);
		
		/// <summary>
		/// Return empty body, status 204. MaybeNull
		/// GET api/Entities/NullCompany
		/// </summary>
		[Get("api/Entities/NullCompany")]
		[return: System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
		Task<DemoWebApi.DemoDataRefit.Client.Company> GetNullCompanyAsync();
		
		/// <summary>
		/// Get a person
		/// so to know the person
		/// GET api/Entities/getPerson/{id}
		/// </summary>
		/// <param name="id">unique id of that guy</param>
		/// <returns>person in db</returns>
		[Get("api/Entities/getPerson/{id}")]
		Task<DemoWebApi.DemoDataRefit.Client.Person> GetPersonAsync(long id);
		
		/// <summary>
		/// GET api/Entities/getPerson2/{id}
		/// </summary>
		[Get("api/Entities/getPerson2/{id}")]
		Task<DemoWebApi.DemoDataRefit.Client.Person> GetPerson2Async(long id);
		
		/// <summary>
		/// PUT api/Entities/link?id={id}&relationship={relationship}
		/// </summary>
		[Put("api/Entities/link?id={id}&relationship={relationship}")]
		Task<bool> LinkPersonAsync(long id, string relationship, [Body()] DemoWebApi.DemoDataRefit.Client.Person person);
		
		/// <summary>
		/// PATCH api/Entities/patchPerson
		/// </summary>
		[Patch("api/Entities/patchPerson")]
		Task<string> PatchPersonAsync([Body()] DemoWebApi.DemoDataRefit.Client.Person person);
		
		/// <summary>
		/// POST api/Entities/IdMap
		/// </summary>
		[Post("api/Entities/IdMap")]
		Task<DemoWebApi.DemoDataRefit.Client.IdMap> PostIdMapAsync([Body()] DemoWebApi.DemoDataRefit.Client.IdMap idMap);
		
		/// <summary>
		/// PUT api/Entities/updatePerson
		/// </summary>
		[Put("api/Entities/updatePerson")]
		Task<string> UpdatePersonAsync([Body()] DemoWebApi.DemoDataRefit.Client.Person person);
	}
	
	public interface IFileUpload
	{
		
		/// <summary>
		/// Post the avatar file with the userId.
		/// POST api/FileUpload?userId={userId}
		/// </summary>
		[Post("api/FileUpload?userId={userId}")]
		Task<DemoWebApi.ControllersRefit.Client.FileResult> UploadAvatarAsync(string userId, IList<FileInfoPart> files);
	}
	
	public interface IHeroes
	{
		
		/// <summary>
		/// DELETE api/Heroes/{id}
		/// </summary>
		[Delete("api/Heroes/{id}")]
		Task DeleteAsync(long id);
		
		/// <summary>
		/// GET api/Heroes/asyncHeroes
		/// </summary>
		[Get("api/Heroes/asyncHeroes")]
		Task<DemoWebApi.ControllersRefit.Client.Hero[]> GetAsyncHeroesAsync();
		
		/// <summary>
		/// Get a hero. Nullable reference. MaybeNull
		/// GET api/Heroes/{id}
		/// </summary>
		[Get("api/Heroes/{id}")]
		[return: System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
		Task<DemoWebApi.ControllersRefit.Client.Hero> GetHeroAsync(long id);
		
		/// <summary>
		/// Get all heroes.
		/// GET api/Heroes
		/// </summary>
		[Get("api/Heroes")]
		Task<DemoWebApi.ControllersRefit.Client.Hero[]> GetHerosAsync();
		
		/// <summary>
		/// MaybeNull
		/// GET api/Heroes/super?id={id}
		/// </summary>
		[Get("api/Heroes/super?id={id}")]
		[return: System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
		Task<DemoWebApi.ControllersRefit.Client.SuperHero> GetSuperHeroAsync(long id);
		
		/// <summary>
		/// POST api/Heroes
		/// </summary>
		[Post("api/Heroes")]
		Task<DemoWebApi.ControllersRefit.Client.Hero> PostAsync([Body()] string name);
		
		/// <summary>
		/// Add a hero. The client will not expect null. NotNull
		/// POST api/Heroes/q?name={name}
		/// </summary>
		/// <returns>Always object.</returns>
		[Post("api/Heroes/q?name={name}")]
		Task<DemoWebApi.ControllersRefit.Client.Hero> PostWithQueryAsync(string name);
		
		/// <summary>
		/// Update hero.
		/// PUT api/Heroes
		/// </summary>
		[Put("api/Heroes")]
		Task<DemoWebApi.ControllersRefit.Client.Hero> PutAsync([Body()] DemoWebApi.ControllersRefit.Client.Hero hero);
		
		/// <summary>
		/// Search heroes
		/// GET api/Heroes/search/{name}
		/// </summary>
		/// <param name="name">keyword contained in hero name.</param>
		/// <returns>Hero array matching the keyword.</returns>
		[Get("api/Heroes/search/{name}")]
		Task<DemoWebApi.ControllersRefit.Client.Hero[]> SearchAsync(string name);
	}
	
	public interface IStringData
	{
		
		/// <summary>
		/// Athlethe Search
		/// GET api/StringData/AthletheSearch?take={take}&skip={skip}&order={order}&sort={sort}&search={search}
		/// </summary>
		/// <param name="take">Generic optional parameter. Default 10</param>
		/// <param name="skip">Default 0</param>
		/// <param name="order">default null</param>
		[Get("api/StringData/AthletheSearch?take={take}&skip={skip}&order={order}&sort={sort}&s" +
			"earch={search}")]
		Task<string> AthletheSearchAsync(System.Nullable<int> take, int skip, string order, string sort, string search);
		
		/// <summary>
		/// GET api/StringData/String
		/// </summary>
		[Get("api/StringData/String")]
		Task<string> GetABCDEAsync();
		
		/// <summary>
		/// Return empty string JSON object. Status 200.
		/// GET api/StringData/EmptyString
		/// </summary>
		[Get("api/StringData/EmptyString")]
		Task<string> GetEmptyStringAsync();
		
		/// <summary>
		/// Return empty body with status 204 No Content, even though the default mime type is application/json. MaybeNull
		/// GET api/StringData/NullString
		/// </summary>
		[Get("api/StringData/NullString")]
		[return: System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
		Task<string> GetNullStringAsync();
	}
	
	public interface ISuperDemo
	{
		
		/// <summary>
		/// GET api/SuperDemo/ActionResult
		/// </summary>
		[Get("api/SuperDemo/ActionResult")]
		Task<System.Net.Http.HttpResponseMessage> GetActionResultAsync();
		
		/// <summary>
		/// GET api/SuperDemo/ActionResult2
		/// </summary>
		[Get("api/SuperDemo/ActionResult2")]
		Task<System.Net.Http.HttpResponseMessage> GetActionResult2Async();
		
		/// <summary>
		/// GET api/SuperDemo/ActionStringResult
		/// </summary>
		[Get("api/SuperDemo/ActionStringResult")]
		Task<string> GetActionStringResultAsync();
		
		/// <summary>
		/// GET api/SuperDemo/BadRequest
		/// </summary>
		[Get("api/SuperDemo/BadRequest")]
		Task<System.Net.Http.HttpResponseMessage> GetBadRequestAsync();
		
		/// <summary>
		/// GET api/SuperDemo/BadRequest2
		/// </summary>
		[Get("api/SuperDemo/BadRequest2")]
		Task<System.Net.Http.HttpResponseMessage> GetBadRequest2Async();
		
		/// <summary>
		/// GET api/SuperDemo/bool
		/// </summary>
		[Get("api/SuperDemo/bool")]
		Task<bool> GetBoolAsync();
		
		/// <summary>
		/// GET api/SuperDemo/byte
		/// </summary>
		[Get("api/SuperDemo/byte")]
		Task<byte> GetbyteAsync();
		
		/// <summary>
		/// GET api/SuperDemo/ByteArray
		/// </summary>
		[Get("api/SuperDemo/ByteArray")]
		Task<byte[]> GetByteArrayAsync();
		
		/// <summary>
		/// GET api/SuperDemo/char
		/// </summary>
		[Get("api/SuperDemo/char")]
		Task<char> GetCharAsync();
		
		/// <summary>
		/// GET api/SuperDemo/Collection
		/// </summary>
		[Get("api/SuperDemo/Collection")]
		Task<System.Collections.ObjectModel.Collection<DemoWebApi.DemoDataRefit.Client.Person>> GetCollectionAsync();
		
		/// <summary>
		/// GET api/SuperDemo/enumGet?d={d}
		/// </summary>
		[Get("api/SuperDemo/enumGet?d={d}")]
		Task<DemoWebApi.DemoDataRefit.Client.Days> GetDayAsync(DemoWebApi.DemoDataRefit.Client.Days d);
		
		/// <summary>
		/// GET api/SuperDemo/decimal
		/// </summary>
		[Get("api/SuperDemo/decimal")]
		Task<decimal> GetDecimalAsync();
		
		/// <summary>
		/// Demo
		/// GET api/SuperDemo/decimalArrayQ?a={a}
		/// </summary>
		[Get("api/SuperDemo/decimalArrayQ?a={a}")]
		Task<decimal[]> GetDecimalArrayQAsync(decimal[] a);
		
		/// <summary>
		/// GET api/SuperDemo/decimal/{d}
		/// </summary>
		[Get("api/SuperDemo/decimal/{d}")]
		Task<decimal> GetDecimalSquareAsync(decimal d);
		
		/// <summary>
		/// GET api/SuperDemo/DecimalZero
		/// </summary>
		[Get("api/SuperDemo/DecimalZero")]
		Task<decimal> GetDecimalZeroAsync();
		
		/// <summary>
		/// GET api/SuperDemo/StringStringDic
		/// </summary>
		[Get("api/SuperDemo/StringStringDic")]
		Task<System.Collections.Generic.IDictionary<string, string>> GetDictionaryAsync();
		
		/// <summary>
		/// GET api/SuperDemo/StringPersonDic
		/// </summary>
		[Get("api/SuperDemo/StringPersonDic")]
		Task<System.Collections.Generic.IDictionary<string, DemoWebApi.DemoDataRefit.Client.Person>> GetDictionaryOfPeopleAsync();
		
		/// <summary>
		/// GET api/SuperDemo/StringPersonDic2
		/// </summary>
		[Get("api/SuperDemo/StringPersonDic2")]
		Task<System.Collections.Generic.Dictionary<string, DemoWebApi.DemoDataRefit.Client.Person>> GetDictionaryOfPeople2Async();
		
		/// <summary>
		/// GET api/SuperDemo/doulbe
		/// </summary>
		[Get("api/SuperDemo/doulbe")]
		Task<double> GetdoubleAsync();
		
		/// <summary>
		/// Result of 0.1d + 0.2d - 0.3d
		/// GET api/SuperDemo/DoubleZero
		/// </summary>
		[Get("api/SuperDemo/DoubleZero")]
		Task<double> GetDoubleZeroAsync();
		
		/// <summary>
		/// Demo IEnumerable Days
		/// GET api/SuperDemo/enumArrayDays?a={a}
		/// </summary>
		[Get("api/SuperDemo/enumArrayDays?a={a}")]
		Task<DemoWebApi.DemoDataRefit.Client.Days[]> GetEnumArrayDaysAsync(System.Collections.Generic.IEnumerable<DemoWebApi.DemoDataRefit.Client.Days> a);
		
		/// <summary>
		/// GET api/SuperDemo/enumArrayQ2?a={a}
		/// </summary>
		[Get("api/SuperDemo/enumArrayQ2?a={a}")]
		Task<System.DayOfWeek[]> GetEnumArrayQ2Async(System.Collections.Generic.List<System.DayOfWeek> a);
		
		/// <summary>
		/// GET api/SuperDemo/FloatZero
		/// </summary>
		[Get("api/SuperDemo/FloatZero")]
		Task<float> GetFloatZeroAsync();
		
		/// <summary>
		/// GET api/SuperDemo/ICollection
		/// </summary>
		[Get("api/SuperDemo/ICollection")]
		Task<System.Collections.Generic.ICollection<DemoWebApi.DemoDataRefit.Client.Person>> GetICollectionAsync();
		
		/// <summary>
		/// GET api/SuperDemo/IList
		/// </summary>
		[Get("api/SuperDemo/IList")]
		Task<System.Collections.Generic.IList<DemoWebApi.DemoDataRefit.Client.Person>> GetIListAsync();
		
		/// <summary>
		/// GET api/SuperDemo/int2d
		/// </summary>
		[Get("api/SuperDemo/int2d")]
		Task<int[,]> GetInt2DAsync();
		
		/// <summary>
		/// GET api/SuperDemo/int2dJagged
		/// </summary>
		[Get("api/SuperDemo/int2dJagged")]
		Task<int[][]> GetInt2DJaggedAsync();
		
		/// <summary>
		/// GET api/SuperDemo/intArray
		/// </summary>
		[Get("api/SuperDemo/intArray")]
		Task<int[]> GetIntArrayAsync();
		
		/// <summary>
		/// Demo int[];
		/// GET api/SuperDemo/intArrayQ?a={a}
		/// </summary>
		[Get("api/SuperDemo/intArrayQ?a={a}")]
		Task<int[]> GetIntArrayQAsync(int[] a);
		
		/// <summary>
		/// Demo IEnumerable long
		/// GET api/SuperDemo/intArrayQ2?a={a}
		/// </summary>
		[Get("api/SuperDemo/intArrayQ2?a={a}")]
		Task<long[]> GetIntArrayQ2Async(System.Collections.Generic.IEnumerable<long> a);
		
		/// <summary>
		/// GET api/SuperDemo/int/{d}
		/// </summary>
		[Get("api/SuperDemo/int/{d}")]
		Task<int> GetIntSquareAsync(int d);
		
		/// <summary>
		/// GET api/SuperDemo/IReadOnlyCollection
		/// </summary>
		[Get("api/SuperDemo/IReadOnlyCollection")]
		Task<System.Collections.Generic.IReadOnlyCollection<DemoWebApi.DemoDataRefit.Client.Person>> GetIReadOnlyCollectionAsync();
		
		/// <summary>
		/// GET api/SuperDemo/IReadOnlyList
		/// </summary>
		[Get("api/SuperDemo/IReadOnlyList")]
		Task<System.Collections.Generic.IReadOnlyList<DemoWebApi.DemoDataRefit.Client.Person>> GetIReadOnlyListAsync();
		
		/// <summary>
		/// GET api/SuperDemo/KeyValuePair
		/// </summary>
		[Get("api/SuperDemo/KeyValuePair")]
		Task<System.Collections.Generic.KeyValuePair<string, DemoWebApi.DemoDataRefit.Client.Person>> GetKeyhValuePairAsync();
		
		/// <summary>
		/// GET api/SuperDemo/List
		/// </summary>
		[Get("api/SuperDemo/List")]
		Task<System.Collections.Generic.List<DemoWebApi.DemoDataRefit.Client.Person>> GetListAsync();
		
		/// <summary>
		/// GET api/SuperDemo/NullableDecimal/{hasValue}
		/// </summary>
		[Get("api/SuperDemo/NullableDecimal/{hasValue}")]
		Task<System.Nullable<decimal>> GetNullableDecimalAsync(bool hasValue);
		
		/// <summary>
		/// MaybeNull
		/// GET api/SuperDemo/NullObject
		/// </summary>
		[Get("api/SuperDemo/NullObject")]
		[return: System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
		Task<DemoWebApi.DemoDataRefit.Client.Person> GetNullPersonAsync();
		
		/// <summary>
		/// GET api/SuperDemo/DoubleNullable?location={location}&dd={dd}&de={de}
		/// </summary>
		[Get("api/SuperDemo/DoubleNullable?location={location}&dd={dd}&de={de}")]
		Task<System.Tuple<string, System.Nullable<double>, System.Nullable<decimal>>> GetPrimitiveNullableAsync(string location, System.Nullable<double> dd, System.Nullable<decimal> de);
		
		/// <summary>
		/// GET api/SuperDemo/DoubleNullable2?dd={dd}&de={de}
		/// </summary>
		[Get("api/SuperDemo/DoubleNullable2?dd={dd}&de={de}")]
		Task<System.Tuple<System.Nullable<double>, System.Nullable<decimal>>> GetPrimitiveNullable2Async(System.Nullable<double> dd, System.Nullable<decimal> de);
		
		/// <summary>
		/// GET api/SuperDemo/sbyte
		/// </summary>
		[Get("api/SuperDemo/sbyte")]
		Task<sbyte> GetsbyteAsync();
		
		/// <summary>
		/// GET api/SuperDemo/short
		/// </summary>
		[Get("api/SuperDemo/short")]
		Task<short> GetShortAsync();
		
		/// <summary>
		/// Demo string array
		/// GET api/SuperDemo/stringArrayQ?a={a}
		/// </summary>
		[Get("api/SuperDemo/stringArrayQ?a={a}")]
		Task<string[]> GetStringArrayQAsync(string[] a);
		
		/// <summary>
		/// Demo List string
		/// GET api/SuperDemo/stringArrayQ2?a={a}
		/// </summary>
		[Get("api/SuperDemo/stringArrayQ2?a={a}")]
		Task<string[]> GetStringArrayQ2Async(System.Collections.Generic.List<string> a);
		
		/// <summary>
		/// ActionResult with FileStreamResult
		/// GET api/SuperDemo/TextStream
		/// </summary>
		[Get("api/SuperDemo/TextStream")]
		Task<System.Net.Http.HttpResponseMessage> GetTextStreamAsync();
		
		/// <summary>
		/// GET api/SuperDemo/uint
		/// </summary>
		[Get("api/SuperDemo/uint")]
		Task<uint> GetUintAsync();
		
		/// <summary>
		/// GET api/SuperDemo/ulong
		/// </summary>
		[Get("api/SuperDemo/ulong")]
		Task<ulong> GetulongAsync();
		
		/// <summary>
		/// GET api/SuperDemo/ushort
		/// </summary>
		[Get("api/SuperDemo/ushort")]
		Task<ushort> GetUShortAsync();
		
		/// <summary>
		/// POST api/SuperDemo/ActionResult
		/// </summary>
		[Post("api/SuperDemo/ActionResult")]
		Task<System.Net.Http.HttpResponseMessage> PostActionResultAsync();
		
		/// <summary>
		/// POST api/SuperDemo/PostActionResult2
		/// </summary>
		[Post("api/SuperDemo/PostActionResult2")]
		Task<System.Net.Http.HttpResponseMessage> PostActionResult2Async([Body()] string s);
		
		/// <summary>
		/// POST api/SuperDemo/PostActionResult3
		/// </summary>
		[Post("api/SuperDemo/PostActionResult3")]
		Task<System.Net.Http.HttpResponseMessage> PostActionResult3Async([Body()] DemoWebApi.DemoDataRefit.Client.Person person);
		
		/// <summary>
		/// Post a collection of person
		/// POST api/SuperDemo/Collection
		/// </summary>
		[Post("api/SuperDemo/Collection")]
		Task<int> PostCollectionAsync([Body()] System.Collections.ObjectModel.Collection<DemoWebApi.DemoDataRefit.Client.Person> list);
		
		/// <summary>
		/// POST api/SuperDemo/enumPost?d={d}
		/// </summary>
		[Post("api/SuperDemo/enumPost?d={d}")]
		Task<DemoWebApi.DemoDataRefit.Client.Days[]> PostDayAsync(DemoWebApi.DemoDataRefit.Client.Days d, [Body()] DemoWebApi.DemoDataRefit.Client.Days d2);
		
		/// <summary>
		/// Demo Dic string and person
		/// POST api/SuperDemo/StringPersonDic
		/// </summary>
		[Post("api/SuperDemo/StringPersonDic")]
		Task<int> PostDictionaryAsync([Body()] System.Collections.Generic.IDictionary<string, DemoWebApi.DemoDataRefit.Client.Person> dic);
		
		/// <summary>
		/// POST api/SuperDemo/Guids
		/// </summary>
		[Post("api/SuperDemo/Guids")]
		Task<System.Guid[]> PostGuidsAsync([Body()] System.Guid[] guids);
		
		/// <summary>
		/// Post ICollection of person
		/// POST api/SuperDemo/ICollection
		/// </summary>
		[Post("api/SuperDemo/ICollection")]
		Task<int> PostICollectionAsync([Body()] System.Collections.Generic.ICollection<DemoWebApi.DemoDataRefit.Client.Person> list);
		
		/// <summary>
		/// Post IList of person
		/// POST api/SuperDemo/IList
		/// </summary>
		[Post("api/SuperDemo/IList")]
		Task<int> PostIListAsync([Body()] System.Collections.Generic.IList<DemoWebApi.DemoDataRefit.Client.Person> list);
		
		/// <summary>
		/// POST api/SuperDemo/int2d
		/// </summary>
		[Post("api/SuperDemo/int2d")]
		Task<bool> PostInt2DAsync([Body()] int[,] a);
		
		/// <summary>
		/// Demo int[][]
		/// POST api/SuperDemo/int2djagged
		/// </summary>
		[Post("api/SuperDemo/int2djagged")]
		Task<bool> PostInt2DJaggedAsync([Body()] int[][] a);
		
		/// <summary>
		/// Demo int[]
		/// POST api/SuperDemo/intArray
		/// </summary>
		[Post("api/SuperDemo/intArray")]
		Task<bool> PostIntArrayAsync([Body()] int[] a);
		
		/// <summary>
		/// Post IReadOnlyCollection of person
		/// POST api/SuperDemo/IReadOnlyCollection
		/// </summary>
		[Post("api/SuperDemo/IReadOnlyCollection")]
		Task<int> PostIReadOnlyCollectionAsync([Body()] System.Collections.Generic.IReadOnlyCollection<DemoWebApi.DemoDataRefit.Client.Person> list);
		
		/// <summary>
		/// Post e of person
		/// POST api/SuperDemo/IReadOnlyList
		/// </summary>
		[Post("api/SuperDemo/IReadOnlyList")]
		Task<int> PostIReadOnlyListAsync([Body()] System.Collections.Generic.IReadOnlyList<DemoWebApi.DemoDataRefit.Client.Person> list);
		
		/// <summary>
		/// Post a list of person
		/// POST api/SuperDemo/List
		/// </summary>
		[Post("api/SuperDemo/List")]
		Task<int> PostListAsync([Body()] System.Collections.Generic.List<DemoWebApi.DemoDataRefit.Client.Person> list);
		
		/// <summary>
		/// POST api/SuperDemo/PostEmpty/{i}
		/// </summary>
		[Post("api/SuperDemo/PostEmpty/{i}")]
		Task<System.Tuple<string, int>> PostWithQueryButEmptyBodyAsync([Body()] string s, int i);
	}
	
	public interface ITextData
	{
		
		/// <summary>
		/// GET api/TextData/AthletheSearch?take={take}&skip={skip}&order={order}&sort={sort}&search={search}
		/// </summary>
		[Get("api/TextData/AthletheSearch?take={take}&skip={skip}&order={order}&sort={sort}&sea" +
			"rch={search}")]
		Task<string> AthletheSearchAsync(System.Nullable<int> take, int skip, string order, string sort, string search);
		
		/// <summary>
		/// GET api/TextData/String
		/// </summary>
		[Get("api/TextData/String")]
		Task<string> GetABCDEAsync();
		
		/// <summary>
		/// Return empty body with status 200.
		/// GET api/TextData/EmptyString
		/// </summary>
		[Get("api/TextData/EmptyString")]
		Task<string> GetEmptyStringAsync();
		
		/// <summary>
		/// MaybeNull
		/// GET api/TextData/NullableString
		/// </summary>
		[Get("api/TextData/NullableString")]
		[return: System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
		Task<string> GetNullableStringAsync();
		
		/// <summary>
		/// Return empty body with status 204 No Content.
		/// GET api/TextData/NullString
		/// </summary>
		[Get("api/TextData/NullString")]
		[return: System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
		Task<string> GetNullStringAsync();
	}
	
	public interface ITuple
	{
		
		/// <summary>
		/// Update in a transaction
		/// PUT api/Tuple/A1TupleArray
		/// </summary>
		[Put("api/Tuple/A1TupleArray")]
		Task A1TupleArrayAsync([Body()] System.Tuple<System.Guid, int>[] idAndOrderArray);
		
		/// <summary>
		/// Update IEnumerable Tuple in a transaction
		/// PUT api/Tuple/A1TupleArray
		/// </summary>
		[Put("api/Tuple/A1TupleArray")]
		Task A2TupleIEnumerableAsync([Body()] System.Collections.Generic.IEnumerable<System.Tuple<System.Guid, int>> idAndOrderArray);
		
		/// <summary>
		/// Post tuple
		/// POST api/Tuple/ChangeName
		/// </summary>
		[Post("api/Tuple/ChangeName")]
		Task<DemoWebApi.DemoDataRefit.Client.Person> ChangeNameAsync([Body()] System.Tuple<string, DemoWebApi.DemoDataRefit.Client.Person> d);
		
		/// <summary>
		/// Get Tuple in return. MaybeNull
		/// GET api/Tuple/PeopleCompany4
		/// </summary>
		[Get("api/Tuple/PeopleCompany4")]
		[return: System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
		Task<System.Tuple<DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Company>> GetPeopleCompany4Async();
		
		/// <summary>
		/// MaybeNull
		/// GET api/Tuple/PeopleCompany5
		/// </summary>
		[Get("api/Tuple/PeopleCompany5")]
		[return: System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
		Task<System.Tuple<DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Company>> GetPeopleCompany5Async();
		
		/// <summary>
		/// GET api/Tuple/Tuple1
		/// </summary>
		[Get("api/Tuple/Tuple1")]
		Task<System.Tuple<int>> GetTuple1Async();
		
		/// <summary>
		/// GET api/Tuple/Tuple2
		/// </summary>
		[Get("api/Tuple/Tuple2")]
		Task<System.Tuple<string, int>> GetTuple2Async();
		
		/// <summary>
		/// GET api/Tuple/Tuple3
		/// </summary>
		[Get("api/Tuple/Tuple3")]
		Task<System.Tuple<string, string, int>> GetTuple3Async();
		
		/// <summary>
		/// GET api/Tuple/Tuple4
		/// </summary>
		[Get("api/Tuple/Tuple4")]
		Task<System.Tuple<string, string, string, int>> GetTuple4Async();
		
		/// <summary>
		/// GET api/Tuple/Tuple5
		/// </summary>
		[Get("api/Tuple/Tuple5")]
		Task<System.Tuple<string, string, string, string, int>> GetTuple5Async();
		
		/// <summary>
		/// GET api/Tuple/Tuple6
		/// </summary>
		[Get("api/Tuple/Tuple6")]
		Task<System.Tuple<string, string, string, string, string, int>> GetTuple6Async();
		
		/// <summary>
		/// GET api/Tuple/Tuple7
		/// </summary>
		[Get("api/Tuple/Tuple7")]
		Task<System.Tuple<string, string, string, string, string, long, int>> GetTuple7Async();
		
		/// <summary>
		/// Post nested tuple
		/// GET api/Tuple/Tuple8
		/// </summary>
		[Get("api/Tuple/Tuple8")]
		Task<System.Tuple<string, string, string, string, string, string, int, System.Tuple<string, string, string>>> GetTuple8Async();
		
		/// <summary>
		/// POST api/Tuple/PeopleCompany2
		/// </summary>
		[Post("api/Tuple/PeopleCompany2")]
		Task<DemoWebApi.DemoDataRefit.Client.Person> LinkPeopleCompany2Async([Body()] System.Tuple<DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Company> peopleAndCompany);
		
		/// <summary>
		/// POST api/Tuple/PeopleCompany3
		/// </summary>
		[Post("api/Tuple/PeopleCompany3")]
		Task<DemoWebApi.DemoDataRefit.Client.Person> LinkPeopleCompany3Async([Body()] System.Tuple<DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Company> peopleAndCompany);
		
		/// <summary>
		/// POST api/Tuple/PeopleCompany4
		/// </summary>
		[Post("api/Tuple/PeopleCompany4")]
		Task<DemoWebApi.DemoDataRefit.Client.Person> LinkPeopleCompany4Async([Body()] System.Tuple<DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Company> peopleAndCompany);
		
		/// <summary>
		/// POST api/Tuple/PeopleCompany5
		/// </summary>
		[Post("api/Tuple/PeopleCompany5")]
		Task<DemoWebApi.DemoDataRefit.Client.Person> LinkPeopleCompany5Async([Body()] System.Tuple<DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Company> peopleAndCompany);
		
		/// <summary>
		/// POST api/Tuple/PeopleCompany6
		/// </summary>
		[Post("api/Tuple/PeopleCompany6")]
		Task<DemoWebApi.DemoDataRefit.Client.Person> LinkPeopleCompany6Async([Body()] System.Tuple<DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Company> peopleAndCompany);
		
		/// <summary>
		/// Post long tuple
		/// POST api/Tuple/PeopleCompany7
		/// </summary>
		[Post("api/Tuple/PeopleCompany7")]
		Task<DemoWebApi.DemoDataRefit.Client.Person> LinkPeopleCompany7Async([Body()] System.Tuple<DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Company> peopleAndCompany);
		
		/// <summary>
		/// POST api/Tuple/PeopleCompany8
		/// </summary>
		[Post("api/Tuple/PeopleCompany8")]
		Task<DemoWebApi.DemoDataRefit.Client.Person> LinkPeopleCompany8Async([Body()] System.Tuple<DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Company> peopleAndCompany);
		
		/// <summary>
		/// POST api/Tuple/PersonCompany1
		/// </summary>
		[Post("api/Tuple/PersonCompany1")]
		Task<DemoWebApi.DemoDataRefit.Client.Person> LinkPersonCompany1Async([Body()] System.Tuple<DemoWebApi.DemoDataRefit.Client.Person, DemoWebApi.DemoDataRefit.Client.Company> peopleAndCompany);
		
		/// <summary>
		/// POST api/Tuple/Tuple1
		/// </summary>
		[Post("api/Tuple/Tuple1")]
		Task<int> PostTuple1Async([Body()] System.Tuple<int> tuple);
		
		/// <summary>
		/// Post tuple string int
		/// POST api/Tuple/Tuple2
		/// </summary>
		[Post("api/Tuple/Tuple2")]
		Task<string> PostTuple2Async([Body()] System.Tuple<string, int> tuple);
		
		/// <summary>
		/// POST api/Tuple/Tuple3
		/// </summary>
		[Post("api/Tuple/Tuple3")]
		Task<string> PostTuple3Async([Body()] System.Tuple<string, string, int> tuple);
		
		/// <summary>
		/// POST api/Tuple/Tuple4
		/// </summary>
		[Post("api/Tuple/Tuple4")]
		Task<string> PostTuple4Async([Body()] System.Tuple<string, string, string, int> tuple);
		
		/// <summary>
		/// POST api/Tuple/Tuple5
		/// </summary>
		[Post("api/Tuple/Tuple5")]
		Task<string> PostTuple5Async([Body()] System.Tuple<string, string, string, string, int> tuple);
		
		/// <summary>
		/// POST api/Tuple/Tuple6
		/// </summary>
		[Post("api/Tuple/Tuple6")]
		Task<string> PostTuple6Async([Body()] System.Tuple<string, string, string, string, string, int> tuple);
		
		/// <summary>
		/// POST api/Tuple/Tuple7
		/// </summary>
		[Post("api/Tuple/Tuple7")]
		Task<string> PostTuple7Async([Body()] System.Tuple<string, string, string, string, string, long, int> tuple);
		
		/// <summary>
		/// POST api/Tuple/Tuple8
		/// </summary>
		[Post("api/Tuple/Tuple8")]
		Task<string> PostTuple8Async([Body()] System.Tuple<string, string, string, string, string, string, string, System.Tuple<string, string, string>> tuple);
	}
	
	public interface IValues
	{
		
		/// <summary>
		/// DELETE api/Values/{id}
		/// </summary>
		[Delete("api/Values/{id}")]
		Task DeleteAsync(int id);
		
		/// <summary>
		/// Get a list of value
		/// GET api/Values
		/// </summary>
		[Get("api/Values")]
		Task<System.Collections.Generic.IEnumerable<string>> GetAsync();
		
		/// <summary>
		/// Get by both Id and name
		/// GET api/Values/{id}?name={name}
		/// </summary>
		[Get("api/Values/{id}?name={name}")]
		Task<string> GetAsync(int id, string name);
		
		/// <summary>
		/// GET api/Values?name={name}
		/// </summary>
		[Get("api/Values?name={name}")]
		Task<string> GetAsync(string name);
		
		/// <summary>
		/// GET api/Values/{id}
		/// </summary>
		[Get("api/Values/{id}")]
		Task<string> GetAsync(int id);
		
		/// <summary>
		/// GET api/Values/Get2
		/// </summary>
		[Get("api/Values/Get2")]
		Task<System.Collections.Generic.IEnumerable<string>> Get2Async();
		
		/// <summary>
		/// POST api/Values
		/// </summary>
		[Post("api/Values")]
		Task<string> PostAsync([Body()] string value);
		
		/// <summary>
		/// Update with valjue
		/// PUT api/Values/{id}
		/// </summary>
		[Put("api/Values/{id}")]
		Task PutAsync(int id, [Body()] string value);
	}
}
